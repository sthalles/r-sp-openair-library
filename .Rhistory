# READ THE TRAJECTORIES
###################################
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-OUT.FILES
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( i=1:length(files), .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = files[1], year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
spLines<-DF2SpLines(data.frame, crs) # create a SpatialLines object
# spLinesDF<-DF2SLDF( spLines, data.frame, crs )
# plotTraj(spLines, col="blue")
#plotTrajFreq(spLines, 10000)
#library(plotKML)
#plotKML(spLinesDF)
###################
# create raster object
rast <- raster(ncols=1, nrows=1)
extent(rast) <- extent(spLines) # assigns the min and max latitude and longitude
# set all the grids to NA
rast <- setValues(rast, NA)
crs1 <- "+proj=aea +lat_1=46 +lat_2=60 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
rast <- projectRaster(rast,crs=crs1,res=10000)
# get the projection from the sp object
crs2 <- proj4string(spLines)
# Reproject
rast <- projectRaster(rast,crs=crs2)
# And then ... rasterize it! This creates a grid version
# of your points using the cells of rast, values from the IP field:
rast2 <- rasterize(spLines, rast,  fun='count')
tiff.file.name<-paste("pheno", YEAR, "_", HEIGHT, "M", sep="")
writeRaster(rast2, tiff.file.name, format="GTiff", overwrite=T)
YEAR<-2007
HEIGHT<-200
MET.FILES<-"/home/thalles/Desktop/hysplit/trunk/working/met2007/"
OUT.FILES<-paste("/home/thalles/OpenAirWD/pheno2007/", HEIGHT, "M/", sep="")
PHENO<-"/home/thalles/Documents/Pheno2007.csv"
HYSPLIT.PATH = "/home/thalles/Desktop/hysplit/trunk/"
###################################
# READ THE TRAJECTORIES
###################################
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-OUT.FILES
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( i=1:length(files), .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = files[1], year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
spLines<-DF2SpLines(data.frame, crs) # create a SpatialLines object
# spLinesDF<-DF2SLDF( spLines, data.frame, crs )
# plotTraj(spLines, col="blue")
#plotTrajFreq(spLines, 10000)
#library(plotKML)
#plotKML(spLinesDF)
###################
# create raster object
rast <- raster(ncols=1, nrows=1)
extent(rast) <- extent(spLines) # assigns the min and max latitude and longitude
# set all the grids to NA
rast <- setValues(rast, NA)
crs1 <- "+proj=aea +lat_1=46 +lat_2=60 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
rast <- projectRaster(rast,crs=crs1,res=10000)
# get the projection from the sp object
crs2 <- proj4string(spLines)
# Reproject
rast <- projectRaster(rast,crs=crs2)
# And then ... rasterize it! This creates a grid version
# of your points using the cells of rast, values from the IP field:
rast2 <- rasterize(spLines, rast,  fun='count')
tiff.file.name<-paste("pheno", YEAR, "_", HEIGHT, "M", sep="")
writeRaster(rast2, tiff.file.name, format="GTiff", overwrite=T)
# cleanWD("/home/thalles/Desktop/hysplit/trunk/")
YEAR<-2007
HEIGHT<-300
MET.FILES<-"/home/thalles/Desktop/hysplit/trunk/working/met2007/"
OUT.FILES<-paste("/home/thalles/OpenAirWD/pheno2007/", HEIGHT, "M/", sep="")
PHENO<-"/home/thalles/Documents/Pheno2007.csv"
HYSPLIT.PATH = "/home/thalles/Desktop/hysplit/trunk/"
###################################
# READ THE TRAJECTORIES
###################################
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
?sum
?rasterize
?rasterize
library(raster)
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
r1[] <- runif(ncell(r1))
par(mfrow = c(1, 2))
plot(r1)
r1[500:1000] <- NA
plot(r1)
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
r1[] <- runif(ncell(r1))
values(r1)
r1[0:100]<-0
values(r1)
r1[r1==0]<-NA
values(r1)
values(r1==NA)<-0
v<-getValues(r1)
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
r1[] <- runif(ncell(r1))
r1[0:100]<-0
v<-getValues(r1)
v
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
r1[] <- runif(ncell(r1))
r1
r1[0:100]<-0
r1
r1[r1==0]<-NA
r1
values(r1)
x<-x0
x<-5
f <- x^3 + 2 *x^2 -7
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 3 * x^2 + 4*x
x <- x - f / f.prime
}
x<-5
f <- x^3 + 2 *x^2 -7
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 3 * x^2 + 4*x
x <- x - f / f.prime
f <- x^3 + 2 *x^2 -7
}
x
x<-50
f <- x^3 + 2 *x^2 -7
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 3 * x^2 + 4*x
x <- x - f / f.prime
f <- x^3 + 2 *x^2 -7
}
x
x<-50
f <- x^3 + 2 *x^2 -7
tolerance <- 0.000001
abs(f) > tolerance
while(abs(f) > tolerance )
{
f.prime <- 3 * x^2 + 4*x
x <- x - f / f.prime
f <- x^3 + 2 *x^2 -7
}
x<-50
f <- x^3 + 2 *x^2 -7
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 3 * x^2 + 4*x
x <- x - f / f.prime
f <- x^3 + 2 *x^2 -7
}
x
x<-50
f <- x^2 + 10*x + 9
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 2 * x + 10
x <- x - f / f.prime
f <- x^2 + 10*x + 9
}
x
x<-5
f <- x^2 + 10*x + 9
tolerance <- 0.000001
while(abs(f) > tolerance )
{
f.prime <- 2 * x + 10
x <- x - f / f.prime
f <- x^2 + 10*x + 9
}
x
library(doParallel)
library(doMPI)
source('/home/thalles/Desktop/OpenairSPfunctions.R')
source('/home/thalles/OpenAirWD/openAirHySplit.R')
########################
# SETUP VARIABLES
YEAR<-2007
HEIGHT<-100
MET.FILES<-"/home/thalles/Desktop/hysplit/trunk/working/met2007/"
OUT.FILES<-paste("/home/thalles/OpenAirWD/pheno2007/", HEIGHT, "M/", sep="")
PHENO<-"/home/thalles/Documents/Pheno2007.csv"
HYSPLIT.PATH = "/home/thalles/Desktop/hysplit/trunk/"
###################################
# READ THE TRAJECTORIES
###################################
print("READING HYSPLIT TRAJECTORIES")
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-OUT.FILES
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( file=files, .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = file, year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
source('/home/thalles/Desktop/OpenairSPfunctions.R')
system.time(spLines<-DF2SpLines(data.frame, crs))
source('/home/thalles/Desktop/OpenairSPfunctions.R')
system.time(spLines<-DF2SpLines(data.frame, crs))
stopCluster(cl)
stopCluster(cl)
closeCluster(cl)
library(doParallel)
library(doMPI)
source('/home/thalles/Desktop/OpenairSPfunctions.R')
source('/home/thalles/OpenAirWD/openAirHySplit.R')
########################
# SETUP VARIABLES
YEAR<-2007
HEIGHT<-100
MET.FILES<-"/home/thalles/Desktop/hysplit/trunk/working/met2007/"
OUT.FILES<-paste("/home/thalles/OpenAirWD/pheno2007/", HEIGHT, "M/", sep="")
PHENO<-"/home/thalles/Documents/Pheno2007.csv"
HYSPLIT.PATH = "/home/thalles/Desktop/hysplit/trunk/"
# # read the data
# pheno2013<-read.csv(PHENO)
#
# # subset the data, in order to get only the points with ID = 1
# pointsDf<-split(pheno2013, pheno2013$ID)
#
# # get the number of phisical cores availables
# cores<-detectCores()-2
#
# cl <- makeCluster(cores)
#
# registerDoParallel(cl)
#
# #cleanWD("/home/thalles/Desktop/hysplit/trunk/")
#
# start.time<-Sys.time()
#
# #length(pointsDf)
#
# foreach(i=1:length(pointsDf)) %dopar%
# {
#     points<-as.data.frame(pointsDf[i])
#
#     # get the point's latitude and longitude
#     lat<-points[[2]][1]
#     long<-points[[3]][1]
#
#     # get the max and min date
#     start.date<-as.Date(points[[4]][1]) # transform to object of type date
#     end.date<-as.Date(points[[4]][nrow(points)]) # transform to object of type date
#
#     # extract the start Year, Month, and Day
#     Year <- format(start.date, "%Y") # long format (4 digit year)
#     start.month<-format(start.date, "%m")
#     start.day<-format(start.date, "%d")
#
#     # extract the end Month, and Day
#     end.month<-format(end.date, "%m")
#     end.day<-format(end.date, "%d")
#
#
#     ########################
#     output.file.name<-""
#     output.file.name<-paste("pheno", "_", as.character(i), "_", sep="")
#
#     #print(output.file.name)
#
#     procTraj(lat = lat, lon = long, year = Year, name = output.file.name,
#              start.month=start.month, start.day=start.day, end.month=end.month, end.day=end.day, hour.interval="1 hour",
#              met = MET.FILES, out = OUT.FILES,
#              hours = 3, height = HEIGHT, hy.path = HYSPLIT.PATH, ID=i )
#
# }
#
# end.time<-Sys.time()
# time.taken<-end.time - start.time
# time.taken
#
# stopCluster(cl)
###################################
# READ THE TRAJECTORIES
###################################
print("READING HYSPLIT TRAJECTORIES")
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-OUT.FILES
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( file=files, .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = file, year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
# spLines<-DF2SpLines(data.frame, crs) # create a SpatialLines object
# spLinesDF<-DF2SLDF( spLines, data.frame, crs )
# plotTraj(spLines, col="blue")
# create raster object
# rast <- raster(ncols=1, nrows=1)
#
# extent(rast) <- extent(spLines) # assigns the min and max latitude and longitude
#
# # set all the grids to NA
# rast <- setValues(rast, NA)
#
# crs1 <- "+proj=aea +lat_1=46 +lat_2=60 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
# rast <- projectRaster(rast,crs=crs1,res=10000)
#
# # get the projection from the sp object
# crs2 <- proj4string(spLines)
#
# # Reproject
# rast <- projectRaster(rast,crs=crs2)
#
# # And then ... rasterize it! This creates a grid version
# # of your points using the cells of rast, values from the IP field:
# rast2 <- rasterize(spLines, rast,  fun='count')
#
# tiff.file.name<-paste("pheno", YEAR, "_", HEIGHT, "M", sep="")
#
# writeRaster(rast2, tiff.file.name, format="GTiff", overwrite=T)
#plotTrajFreq(spLines, 10000)
#library(plotKML)
#plotKML(spLinesDF)
spLines<-DF2SpLines(data.frame, crs)
closeCluster(cl)
stopCluster(cl)
head(dataFrames)
closeCluster(cl)
library("raster")
raster("~/pheno2007_300M.tif")
########################
# If the required package is not available, download it
if( !require("doParallel", character.only = TRUE)){
install.packages("doParallel", dependencies = T)
}
# If the required package is not available, download it
if( !require("doMPI", character.only = TRUE)){
install.packages("doMPI", dependencies = T)
}
source('OpenairSPfunctions.R')
# source('openAirHySplit.R')
########################
# SETUP VARIABLES
YEAR<-2013
HEIGHT<-500
MET.FILES<-"/home/thalles/Desktop/hysplit/trunk/working/met2015/"
OUT.FILES<-paste("/home/thalles/OpenAirWD/pheno2015/", HEIGHT, "M/", sep="")
PHENO<-"/home/thalles/Documents/Pheno2015.csv"
HYSPLIT.PATH = "/home/thalles/Desktop/hysplit/trunk/"
###################################
# READ THE TRAJECTORIES
###################################
print("READING HYSPLIT TRAJECTORIES")
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-OUT.FILES
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( file=files, .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = file, year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
source('openAirHySplit.R')
source('openAirHySplit.R')
getwd()
setwd("/home/thalles/Desktop/r-sp-openair-library")
source('OpenairSPfunctions.R')
source('openAirHySplit.R')
setwd("/home/thalles/Desktop/r-sp-openair-library")
########################
# If the required package is not available, download it
if( !require("doParallel", character.only = TRUE)){
install.packages("doParallel", dependencies = T)
}
# If the required package is not available, download it
if( !require("doMPI", character.only = TRUE)){
install.packages("doMPI", dependencies = T)
}
source('OpenairSPfunctions.R')
source('openAirHySplit.R')
########################
# SETUP VARIABLES
kYear <- 2013
KHeight <- 500
KMetFiles <- "/home/thalles/Desktop/hysplit/trunk/working/met2013/"
KOutFiles <- paste("/home/thalles/OpenAirWD/pheno2013/", KHeight, "M/", sep="")
KPheno <- "/home/thalles/Documents/Pheno2013.csv"
KHySplitPath <- "/home/thalles/Desktop/hysplit/trunk/"
###################################
# READ THE TRAJECTORIES
###################################
print("Reading HySplit pre-calculated Trajectories")
# get the number of phisical cores availables
cores<-detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
path<-KOutFiles
# list all files
files<-list.files(path=path)
# remove the file extensions
files<-sub("\\.[[:alnum:]]+$", "", files)
start.time<-Sys.time()
# iterate through all files and open it
# merge all files in one data frame
data.frame <- foreach( file=files, .combine=rbind, .packages='openair' ) %dopar%
{
# get the file
importTraj(site = file, year="", local=path)
# get only the desired dates
#traj2013<-selectByDate(traj2013, start = "27/07/2013", end = "27/07/2013", hour=19:21)
}
end.time<-Sys.time()
time.taken<-end.time - start.time
time.taken
stopCluster(cl)
crs<-CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
print("Creating SpatialLines Object")
spLines <- Df2SpLines(data.frame, crs)
remove(data.frame)
list.splines <- SplitSpLines( spLines, cores )
source('OpenairSPfunctions.R')
source('OpenairSPfunctions.R')
list.splines <- SplitSpLines( spLines, cores )
list.splines
74253*8
